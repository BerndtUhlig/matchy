/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/matchy_event": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.matchy_event.id"];
          inserted_at?: parameters["rowFilter.matchy_event.inserted_at"];
          updated_at?: parameters["rowFilter.matchy_event.updated_at"];
          organizer?: parameters["rowFilter.matchy_event.organizer"];
          title?: parameters["rowFilter.matchy_event.title"];
          description?: parameters["rowFilter.matchy_event.description"];
          date_time?: parameters["rowFilter.matchy_event.date_time"];
          event_location?: parameters["rowFilter.matchy_event.event_location"];
          max_participants?: parameters["rowFilter.matchy_event.max_participants"];
          uses_groups?: parameters["rowFilter.matchy_event.uses_groups"];
          event_groups?: parameters["rowFilter.matchy_event.event_groups"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["matchy_event"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** matchy_event */
          matchy_event?: definitions["matchy_event"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.matchy_event.id"];
          inserted_at?: parameters["rowFilter.matchy_event.inserted_at"];
          updated_at?: parameters["rowFilter.matchy_event.updated_at"];
          organizer?: parameters["rowFilter.matchy_event.organizer"];
          title?: parameters["rowFilter.matchy_event.title"];
          description?: parameters["rowFilter.matchy_event.description"];
          date_time?: parameters["rowFilter.matchy_event.date_time"];
          event_location?: parameters["rowFilter.matchy_event.event_location"];
          max_participants?: parameters["rowFilter.matchy_event.max_participants"];
          uses_groups?: parameters["rowFilter.matchy_event.uses_groups"];
          event_groups?: parameters["rowFilter.matchy_event.event_groups"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.matchy_event.id"];
          inserted_at?: parameters["rowFilter.matchy_event.inserted_at"];
          updated_at?: parameters["rowFilter.matchy_event.updated_at"];
          organizer?: parameters["rowFilter.matchy_event.organizer"];
          title?: parameters["rowFilter.matchy_event.title"];
          description?: parameters["rowFilter.matchy_event.description"];
          date_time?: parameters["rowFilter.matchy_event.date_time"];
          event_location?: parameters["rowFilter.matchy_event.event_location"];
          max_participants?: parameters["rowFilter.matchy_event.max_participants"];
          uses_groups?: parameters["rowFilter.matchy_event.uses_groups"];
          event_groups?: parameters["rowFilter.matchy_event.event_groups"];
        };
        body: {
          /** matchy_event */
          matchy_event?: definitions["matchy_event"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_registration": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_registration.id"];
          event_id?: parameters["rowFilter.event_registration.event_id"];
          user_id?: parameters["rowFilter.event_registration.user_id"];
          inserted_at?: parameters["rowFilter.event_registration.inserted_at"];
          in_group_a?: parameters["rowFilter.event_registration.in_group_a"];
          in_group_b?: parameters["rowFilter.event_registration.in_group_b"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_registration"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_registration */
          event_registration?: definitions["event_registration"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_registration.id"];
          event_id?: parameters["rowFilter.event_registration.event_id"];
          user_id?: parameters["rowFilter.event_registration.user_id"];
          inserted_at?: parameters["rowFilter.event_registration.inserted_at"];
          in_group_a?: parameters["rowFilter.event_registration.in_group_a"];
          in_group_b?: parameters["rowFilter.event_registration.in_group_b"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_registration.id"];
          event_id?: parameters["rowFilter.event_registration.event_id"];
          user_id?: parameters["rowFilter.event_registration.user_id"];
          inserted_at?: parameters["rowFilter.event_registration.inserted_at"];
          in_group_a?: parameters["rowFilter.event_registration.in_group_a"];
          in_group_b?: parameters["rowFilter.event_registration.in_group_b"];
        };
        body: {
          /** event_registration */
          event_registration?: definitions["event_registration"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_group_pair": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_group_pair.id"];
          group_a?: parameters["rowFilter.event_group_pair.group_a"];
          group_b?: parameters["rowFilter.event_group_pair.group_b"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_group_pair"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_group_pair */
          event_group_pair?: definitions["event_group_pair"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_group_pair.id"];
          group_a?: parameters["rowFilter.event_group_pair.group_a"];
          group_b?: parameters["rowFilter.event_group_pair.group_b"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_group_pair.id"];
          group_a?: parameters["rowFilter.event_group_pair.group_a"];
          group_b?: parameters["rowFilter.event_group_pair.group_b"];
        };
        body: {
          /** event_group_pair */
          event_group_pair?: definitions["event_group_pair"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_group": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_group.id"];
          title?: parameters["rowFilter.event_group.title"];
          description?: parameters["rowFilter.event_group.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_group"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_group */
          event_group?: definitions["event_group"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_group.id"];
          title?: parameters["rowFilter.event_group.title"];
          description?: parameters["rowFilter.event_group.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_group.id"];
          title?: parameters["rowFilter.event_group.title"];
          description?: parameters["rowFilter.event_group.description"];
        };
        body: {
          /** event_group */
          event_group?: definitions["event_group"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  matchy_event: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
    /** Format: uuid */
    organizer: string;
    /** Format: text */
    title: string;
    /** Format: text */
    description: string;
    /** Format: timestamp with time zone */
    date_time: string;
    /** Format: text */
    event_location: string;
    /** Format: integer */
    max_participants?: number;
    /** Format: boolean */
    uses_groups?: boolean;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `event_group_pair.id`.<fk table='event_group_pair' column='id'/>
     */
    event_groups: number;
  };
  event_registration: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: uuid */
    event_id: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /** Format: boolean */
    in_group_a: boolean;
    /** Format: boolean */
    in_group_b: boolean;
  };
  event_group_pair: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `event_group.id`.<fk table='event_group' column='id'/>
     */
    group_a: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `event_group.id`.<fk table='event_group' column='id'/>
     */
    group_b: number;
  };
  /** @description User profile information like a phone number, not to be confused with user auth stuff */
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
  };
  event_group: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    title?: string;
    /** Format: text */
    description?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description matchy_event */
  "body.matchy_event": definitions["matchy_event"];
  /** Format: uuid */
  "rowFilter.matchy_event.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.matchy_event.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.matchy_event.updated_at": string;
  /** Format: uuid */
  "rowFilter.matchy_event.organizer": string;
  /** Format: text */
  "rowFilter.matchy_event.title": string;
  /** Format: text */
  "rowFilter.matchy_event.description": string;
  /** Format: timestamp with time zone */
  "rowFilter.matchy_event.date_time": string;
  /** Format: text */
  "rowFilter.matchy_event.event_location": string;
  /** Format: integer */
  "rowFilter.matchy_event.max_participants": string;
  /** Format: boolean */
  "rowFilter.matchy_event.uses_groups": string;
  /** Format: bigint */
  "rowFilter.matchy_event.event_groups": string;
  /** @description event_registration */
  "body.event_registration": definitions["event_registration"];
  /** Format: bigint */
  "rowFilter.event_registration.id": string;
  /** Format: uuid */
  "rowFilter.event_registration.event_id": string;
  /** Format: uuid */
  "rowFilter.event_registration.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.event_registration.inserted_at": string;
  /** Format: boolean */
  "rowFilter.event_registration.in_group_a": string;
  /** Format: boolean */
  "rowFilter.event_registration.in_group_b": string;
  /** @description event_group_pair */
  "body.event_group_pair": definitions["event_group_pair"];
  /** Format: bigint */
  "rowFilter.event_group_pair.id": string;
  /** Format: bigint */
  "rowFilter.event_group_pair.group_a": string;
  /** Format: bigint */
  "rowFilter.event_group_pair.group_b": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.website": string;
  /** @description event_group */
  "body.event_group": definitions["event_group"];
  /** Format: bigint */
  "rowFilter.event_group.id": string;
  /** Format: text */
  "rowFilter.event_group.title": string;
  /** Format: text */
  "rowFilter.event_group.description": string;
}

export interface operations {}

export interface external {}
