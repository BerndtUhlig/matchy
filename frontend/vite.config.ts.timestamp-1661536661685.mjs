// vite.config.ts
import { fileURLToPath, URL } from "node:url";
import Components from "unplugin-vue-components/vite";
import AutoImport from "unplugin-auto-import/vite";
import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import vueJsx from "@vitejs/plugin-vue-jsx";
import { visualizer } from "rollup-plugin-visualizer";
import vuetify from "vite-plugin-vuetify";
var __vite_injected_original_import_meta_url = "file:///C:/Users/jabar/Desktop/dev/matchy/frontend/vite.config.ts";
var vite_config_default = defineConfig({
  plugins: [
    vue(),
    vueJsx(),
    vuetify({ autoImport: true }),
    AutoImport({
      include: [
        /\.ts$/,
        /\.vue$/
      ],
      imports: ["vue", "vue-router"],
      dirs: ["./src/composables"],
      eslintrc: {
        enabled: true,
        filepath: "./.eslintrc-auto-import.json",
        globalsPropValue: true
      },
      dts: "src/auto-imports.d.ts"
    }),
    Components({ dts: "src/components.d.ts" }),
    visualizer({
      emitFile: true,
      filename: "stats.html",
      template: "sunburst"
    })
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  server: {
    port: 5173
  },
  build: {
    outDir: "dist",
    target: "esnext"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxqYWJhclxcXFxEZXNrdG9wXFxcXGRldlxcXFxtYXRjaHlcXFxcZnJvbnRlbmRcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGphYmFyXFxcXERlc2t0b3BcXFxcZGV2XFxcXG1hdGNoeVxcXFxmcm9udGVuZFxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvamFiYXIvRGVza3RvcC9kZXYvbWF0Y2h5L2Zyb250ZW5kL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZmlsZVVSTFRvUGF0aCwgVVJMIH0gZnJvbSBcIm5vZGU6dXJsXCI7XG5cbmltcG9ydCBDb21wb25lbnRzIGZyb20gXCJ1bnBsdWdpbi12dWUtY29tcG9uZW50cy92aXRlXCI7XG5pbXBvcnQgQXV0b0ltcG9ydCBmcm9tIFwidW5wbHVnaW4tYXV0by1pbXBvcnQvdml0ZVwiO1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCB2dWUgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXZ1ZVwiO1xuaW1wb3J0IHZ1ZUpzeCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tdnVlLWpzeFwiO1xuaW1wb3J0IHsgdmlzdWFsaXplciB9IGZyb20gXCJyb2xsdXAtcGx1Z2luLXZpc3VhbGl6ZXJcIjtcbmltcG9ydCB2dWV0aWZ5IGZyb20gXCJ2aXRlLXBsdWdpbi12dWV0aWZ5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHBsdWdpbnM6IFtcbiAgICB2dWUoKSxcbiAgICB2dWVKc3goKSxcbiAgICB2dWV0aWZ5KHsgYXV0b0ltcG9ydDogdHJ1ZSB9KSxcbiAgICBBdXRvSW1wb3J0KHtcbiAgICAgIC8vIHRhcmdldHMgdG8gdHJhbnNmb3JtXG4gICAgICBpbmNsdWRlOiBbXG4gICAgICAgIC9cXC50cyQvLCAvLyAudHMsXG4gICAgICAgIC9cXC52dWUkLywgLy8gLnZ1ZVxuICAgICAgXSxcbiAgICAgIC8vIGdsb2JhbCBpbXBvcnRzIHRvIHJlZ2lzdGVyXG4gICAgICBpbXBvcnRzOiBbXCJ2dWVcIiwgXCJ2dWUtcm91dGVyXCJdLFxuICAgICAgZGlyczogW1wiLi9zcmMvY29tcG9zYWJsZXNcIl0sXG5cbiAgICAgIC8vIEdlbmVyYXRlIGNvcnJlc3BvbmRpbmcgLmVzbGludHJjLWF1dG8taW1wb3J0Lmpzb24gZmlsZS5cbiAgICAgIC8vIGVzbGludCBnbG9iYWxzIERvY3MgLSBodHRwczovL2VzbGludC5vcmcvZG9jcy91c2VyLWd1aWRlL2NvbmZpZ3VyaW5nL2xhbmd1YWdlLW9wdGlvbnMjc3BlY2lmeWluZy1nbG9iYWxzXG4gICAgICBlc2xpbnRyYzoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLCAvLyBEZWZhdWx0IGBmYWxzZWBcbiAgICAgICAgZmlsZXBhdGg6IFwiLi8uZXNsaW50cmMtYXV0by1pbXBvcnQuanNvblwiLCAvLyBEZWZhdWx0IGAuLy5lc2xpbnRyYy1hdXRvLWltcG9ydC5qc29uYFxuICAgICAgICBnbG9iYWxzUHJvcFZhbHVlOiB0cnVlLCAvLyBEZWZhdWx0IGB0cnVlYCwgKHRydWUgfCBmYWxzZSB8ICdyZWFkb25seScgfCAncmVhZGFibGUnIHwgJ3dyaXRhYmxlJyB8ICd3cml0ZWFibGUnKVxuICAgICAgfSxcblxuICAgICAgLy8gRmlsZXBhdGggdG8gZ2VuZXJhdGUgY29ycmVzcG9uZGluZyAuZC50cyBmaWxlLlxuICAgICAgLy8gRGVmYXVsdHMgdG8gJy4vYXV0by1pbXBvcnRzLmQudHMnIHdoZW4gYHR5cGVzY3JpcHRgIGlzIGluc3RhbGxlZCBsb2NhbGx5LlxuICAgICAgLy8gU2V0IGBmYWxzZWAgdG8gZGlzYWJsZS5cbiAgICAgIGR0czogXCJzcmMvYXV0by1pbXBvcnRzLmQudHNcIixcbiAgICB9KSxcbiAgICBDb21wb25lbnRzKHsgZHRzOiBcInNyYy9jb21wb25lbnRzLmQudHNcIiB9KSxcbiAgICB2aXN1YWxpemVyKHtcbiAgICAgIGVtaXRGaWxlOiB0cnVlLFxuICAgICAgZmlsZW5hbWU6IFwic3RhdHMuaHRtbFwiLFxuICAgICAgdGVtcGxhdGU6IFwic3VuYnVyc3RcIixcbiAgICB9KSxcbiAgXSxcbiAgcmVzb2x2ZToge1xuICAgIGFsaWFzOiB7XG4gICAgICBcIkBcIjogZmlsZVVSTFRvUGF0aChuZXcgVVJMKFwiLi9zcmNcIiwgaW1wb3J0Lm1ldGEudXJsKSksXG4gICAgfSxcbiAgfSxcbiAgc2VydmVyOiB7XG4gICAgcG9ydDogNTE3MyxcbiAgfSxcbiAgYnVpbGQ6IHtcbiAgICBvdXREaXI6IFwiZGlzdFwiLFxuICAgIHRhcmdldDogXCJlc25leHRcIixcbiAgfSxcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUE4VDtBQUU5VDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJ5TSxJQUFNLDJDQUEyQztBQVUxUCxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixTQUFTO0FBQUEsSUFDUCxJQUFJO0FBQUEsSUFDSixPQUFPO0FBQUEsSUFDUCxRQUFRLEVBQUUsWUFBWSxLQUFLLENBQUM7QUFBQSxJQUM1QixXQUFXO0FBQUEsTUFFVCxTQUFTO0FBQUEsUUFDUDtBQUFBLFFBQ0E7QUFBQSxNQUNGO0FBQUEsTUFFQSxTQUFTLENBQUMsT0FBTyxZQUFZO0FBQUEsTUFDN0IsTUFBTSxDQUFDLG1CQUFtQjtBQUFBLE1BSTFCLFVBQVU7QUFBQSxRQUNSLFNBQVM7QUFBQSxRQUNULFVBQVU7QUFBQSxRQUNWLGtCQUFrQjtBQUFBLE1BQ3BCO0FBQUEsTUFLQSxLQUFLO0FBQUEsSUFDUCxDQUFDO0FBQUEsSUFDRCxXQUFXLEVBQUUsS0FBSyxzQkFBc0IsQ0FBQztBQUFBLElBQ3pDLFdBQVc7QUFBQSxNQUNULFVBQVU7QUFBQSxNQUNWLFVBQVU7QUFBQSxNQUNWLFVBQVU7QUFBQSxJQUNaLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxPQUFPO0FBQUEsTUFDTCxLQUFLLGNBQWMsSUFBSSxJQUFJLFNBQVMsd0NBQWUsQ0FBQztBQUFBLElBQ3REO0FBQUEsRUFDRjtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ04sTUFBTTtBQUFBLEVBQ1I7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLFFBQVE7QUFBQSxJQUNSLFFBQVE7QUFBQSxFQUNWO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
